{"version":3,"file":"index-Cl-kXcxf.js","sources":["../../src/core/Game.js","../../src/main.js"],"sourcesContent":["export class JumpingDotGame {\n    constructor() {\n        this.canvas = document.getElementById('gameCanvas');\n        this.ctx = this.canvas.getContext('2d');\n        this.gameStatus = document.getElementById('gameStatus');\n        this.timerDisplay = document.getElementById('timer');\n        this.scoreDisplay = document.getElementById('score');\n        \n        \n        // Game state\n        this.gameRunning = false;\n        this.gameOver = false;\n        this.currentStage = 1;\n        this.debugMode = false;\n        \n        // Player (jumping dot)\n        this.player = {\n            x: 100,\n            y: 400,\n            vx: 0,\n            vy: 0,\n            radius: 3,\n            grounded: false\n        };\n        \n        // Movement state tracking\n        this.hasMovedOnce = false;\n        \n        // Timer and score system\n        this.timeLimit = 20; // 20 seconds - very challenging!\n        this.timeRemaining = this.timeLimit;\n        this.gameStartTime = null;\n        this.finalScore = 0;\n        \n        // Clear animation system\n        this.clearAnimation = {\n            active: false,\n            startTime: null,\n            duration: 3000, // 3 seconds\n            particles: []\n        };\n        \n        // Death animation system\n        this.deathAnimation = {\n            active: false,\n            startTime: null,\n            duration: 2000, // 2 seconds\n            particles: []\n        };\n        \n        // Death marks (persist until page reload)\n        this.deathMarks = [];\n        \n        // Trail effect for smooth animation\n        this.trail = [];\n        this.maxTrailLength = 8;\n        \n        // Physics constants\n        this.gravity = 0.6;\n        this.jumpForce = -12;\n        this.autoJumpInterval = 300; // milliseconds - slightly longer for better rhythm\n        this.lastJumpTime = null;\n        this.moveSpeed = 4;\n        this.friction = 0.95; // Inertia system\n        \n        // Camera\n        this.camera = {\n            x: 0,\n            y: 0\n        };\n        \n        // Stage elements\n        this.stage = this.createStage(this.currentStage);\n        \n        // Input handling\n        this.keys = {};\n        this.setupInput();\n        \n        // Game loop\n        this.lastTime = null;\n        this.animationId = null;\n        this.init();\n    }\n    \n    init() {\n        this.gameStatus.textContent = 'Press SPACE to start';\n        this.gameRunning = false;\n        this.gameOver = false;\n        \n        // Reset player position\n        this.player.x = 100;\n        this.player.y = 400;\n        this.player.vx = 0;\n        this.player.vy = 0;\n        this.player.grounded = false;\n        \n        // Reset movement tracking\n        this.hasMovedOnce = false;\n        \n        // Reset timer\n        this.timeRemaining = this.timeLimit;\n        this.gameStartTime = null;\n        this.finalScore = 0;\n        \n        // Reset clear animation\n        this.clearAnimation.active = false;\n        this.clearAnimation.startTime = null;\n        this.clearAnimation.particles = [];\n        \n        // Reset death animation\n        this.deathAnimation.active = false;\n        this.deathAnimation.startTime = null;\n        this.deathAnimation.particles = [];\n        \n        // Note: deathMarks are NOT reset - they persist until page reload\n        \n        // Update UI\n        this.timerDisplay.textContent = `Time: ${this.timeLimit}`;\n        this.scoreDisplay.textContent = 'Score: 0';\n        \n        // Reset camera\n        this.camera.x = 0;\n        this.camera.y = 0;\n        \n        // Reset trail\n        this.trail = [];\n        \n        // Reset physics constants to ensure consistency\n        this.gravity = 0.6;\n        this.jumpForce = -12;\n        this.autoJumpInterval = 300;\n        this.moveSpeed = 4;\n        this.friction = 0.95;\n        \n        // Reset timing variables to null for proper initialization\n        this.lastJumpTime = null;\n        this.lastTime = null;\n        \n        // Clear all key states to prevent momentum carryover\n        this.keys = {};\n        \n        // Stop any existing game loop before starting new one\n        if (this.animationId) {\n            cancelAnimationFrame(this.animationId);\n        }\n        \n        this.animationId = requestAnimationFrame((time) => this.gameLoop(time));\n    }\n    \n    createStage(stageNumber) {\n        switch (stageNumber) {\n            case 1:\n                return this.createStage1();\n            case 2:\n                return this.createStage2();\n            default:\n                return this.createStage1();\n        }\n    }\n    \n    createStage1() {\n        return {\n            platforms: [\n                // Ground sections with proper clearable gaps\n                { x1: -500, y1: 500, x2: 350, y2: 500 },\n                { x1: 450, y1: 500, x2: 750, y2: 500 },\n                { x1: 850, y1: 500, x2: 1150, y2: 500 },\n                { x1: 1250, y1: 480, x2: 1550, y2: 480 },\n                { x1: 1650, y1: 460, x2: 1950, y2: 460 },\n                { x1: 2050, y1: 440, x2: 2350, y2: 440 },\n                \n                // Floating platforms for safe landing\n                { x1: 375, y1: 420, x2: 425, y2: 420 },\n                { x1: 775, y1: 400, x2: 825, y2: 400 },\n                { x1: 1175, y1: 400, x2: 1225, y2: 400 },\n                { x1: 1575, y1: 380, x2: 1625, y2: 380 },\n                { x1: 1975, y1: 360, x2: 2025, y2: 360 },\n            ],\n            \n            movingPlatforms: [], // No moving platforms in stage 1\n            \n            holes: [\n                // Smaller, jumpable gaps\n                { x1: 350, x2: 450 },\n                { x1: 750, x2: 850 },\n                { x1: 1150, x2: 1250 },\n                { x1: 1550, x2: 1650 },\n                { x1: 1950, x2: 2050 },\n            ],\n            \n            spikes: [\n                // Fewer, more strategic spikes\n                { x: 500, y: 480, width: 15, height: 15 },\n                { x: 900, y: 480, width: 15, height: 15 },\n                { x: 1700, y: 440, width: 15, height: 15 },\n            ],\n            \n            movingSpikes: [], // No moving spikes in stage 1\n            \n            goal: {\n                x: 2400,\n                y: 390,\n                width: 40,\n                height: 50\n            },\n            \n            startText: {\n                x: 50,\n                y: 450,\n                text: \"STAGE 1\"\n            },\n            \n            goalText: {\n                x: 2420,\n                y: 370,\n                text: \"GOAL\"\n            },\n            \n            leftEdgeMessage: {\n                x: -400,\n                y: 450,\n                text: \"NOTHING HERE\"\n            },\n            \n            leftEdgeSubMessage: {\n                x: -400,\n                y: 470,\n                text: \"GO RIGHT â†’\"\n            }\n        };\n    }\n    \n    createStage2() {\n        return {\n            platforms: [\n                // Ground sections with bigger gaps for moving platforms\n                { x1: -500, y1: 500, x2: 300, y2: 500 },\n                { x1: 500, y1: 500, x2: 700, y2: 500 },\n                { x1: 900, y1: 500, x2: 1100, y2: 500 },\n                { x1: 1300, y1: 480, x2: 1500, y2: 480 },\n                { x1: 1700, y1: 460, x2: 1900, y2: 460 },\n                { x1: 2100, y1: 440, x2: 2350, y2: 440 },\n                \n                // Some fixed floating platforms\n                { x1: 1150, y1: 400, x2: 1250, y2: 400 },\n                { x1: 1950, y1: 360, x2: 2050, y2: 360 },\n            ],\n            \n            // Moving platforms (new!)\n            movingPlatforms: [\n                {\n                    x1: 350, y1: 420, x2: 450, y2: 420,\n                    startX: 350, endX: 450,\n                    currentX: 350,\n                    speed: 1.5,\n                    direction: 1\n                },\n                {\n                    x1: 750, y1: 400, x2: 850, y2: 400,\n                    startX: 750, endX: 850,\n                    currentX: 750,\n                    speed: 2,\n                    direction: 1\n                },\n                {\n                    x1: 1550, y1: 380, x2: 1650, y2: 380,\n                    startX: 1550, endX: 1650,\n                    currentX: 1550,\n                    speed: 1,\n                    direction: 1\n                }\n            ],\n            \n            holes: [\n                // Bigger gaps requiring moving platforms\n                { x1: 300, x2: 500 },\n                { x1: 700, x2: 900 },\n                { x1: 1100, x2: 1300 },\n                { x1: 1500, x2: 1700 },\n                { x1: 1900, x2: 2100 },\n            ],\n            \n            spikes: [\n                // More spikes for increased difficulty\n                { x: 550, y: 480, width: 15, height: 15 },\n                { x: 800, y: 480, width: 15, height: 15 },\n                { x: 1200, y: 380, width: 15, height: 15 },\n                { x: 1750, y: 440, width: 15, height: 15 },\n            ],\n            \n            movingSpikes: [], // No moving spikes yet in stage 2\n            \n            goal: {\n                x: 2400,\n                y: 390,\n                width: 40,\n                height: 50\n            },\n            \n            startText: {\n                x: 50,\n                y: 450,\n                text: \"STAGE 2\"\n            },\n            \n            goalText: {\n                x: 2420,\n                y: 370,\n                text: \"GOAL\"\n            },\n            \n            leftEdgeMessage: {\n                x: -400,\n                y: 450,\n                text: \"NOTHING HERE\"\n            },\n            \n            leftEdgeSubMessage: {\n                x: -400,\n                y: 470,\n                text: \"GO RIGHT â†’\"\n            }\n        };\n    }\n    \n    \n    setupInput() {\n        document.addEventListener('keydown', (e) => {\n            // Only process arrow key inputs if game is running and not over\n            if (!this.gameOver) {\n                this.keys[e.code] = true;\n            }\n            \n            if (e.code === 'Space' && !this.gameRunning && !this.gameOver) {\n                this.startGame();\n                e.preventDefault();\n            }\n            \n            if (e.code === 'KeyR' && this.gameOver && !this.keys['KeyR']) {\n                this.init();\n                e.preventDefault();\n            }\n            \n            \n            // Prevent arrow key scrolling\n            if (['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(e.code)) {\n                e.preventDefault();\n            }\n        });\n        \n        document.addEventListener('keyup', (e) => {\n            // Clear key state on keyup, but only if game is not over\n            if (!this.gameOver) {\n                this.keys[e.code] = false;\n            }\n        });\n        \n    }\n    \n    \n    \n    \n    \n    \n    startGame() {\n        this.gameRunning = true;\n        this.gameStatus.textContent = 'Playing';\n        // Initialize lastJumpTime relative to current game time for consistency\n        this.lastJumpTime = performance.now();\n        this.gameStartTime = performance.now();\n    }\n    \n    update(deltaTime) {\n        if (!this.gameRunning || this.gameOver) return;\n        \n        // Update timer\n        if (this.gameStartTime) {\n            const currentTime = performance.now();\n            const elapsedSeconds = (currentTime - this.gameStartTime) / 1000;\n            this.timeRemaining = Math.max(0, this.timeLimit - elapsedSeconds);\n            \n            // Check for time out\n            if (this.timeRemaining <= 0) {\n                this.handlePlayerDeath('Time Up! Press R to restart');\n                return;\n            }\n            \n            // Update timer display\n            this.timerDisplay.textContent = `Time: ${Math.ceil(this.timeRemaining)}`;\n        }\n        \n        // Handle input (left/right movement with no friction - unforgiving game)\n        let leftInput = this.keys['ArrowLeft'];\n        let rightInput = this.keys['ArrowRight'];\n        \n        \n        if (leftInput) {\n            this.player.vx -= 0.5;\n            this.hasMovedOnce = true;\n        } else if (rightInput) {\n            this.player.vx += 0.5;\n            this.hasMovedOnce = true;\n        }\n        \n        // Once movement has been initiated, ensure minimal movement continues\n        if (this.hasMovedOnce && Math.abs(this.player.vx) < 0.2) {\n            this.player.vx = this.player.vx >= 0 ? 0.2 : -0.2;\n        }\n        \n        // Clamp speed\n        const maxSpeed = this.moveSpeed;\n        if (this.player.vx > maxSpeed) this.player.vx = maxSpeed;\n        if (this.player.vx < -maxSpeed) this.player.vx = -maxSpeed;\n        \n        // Auto jump when grounded and enough time has passed\n        const currentTime = performance.now();\n        // Initialize lastJumpTime if it's null (first time or after reset)\n        if (this.lastJumpTime === null) {\n            this.lastJumpTime = currentTime - this.autoJumpInterval; // Allow immediate jump\n        }\n        \n        if (this.player.grounded && (currentTime - this.lastJumpTime) > this.autoJumpInterval) {\n            this.player.vy = this.jumpForce;\n            this.player.grounded = false;\n            this.lastJumpTime = currentTime;\n        }\n        \n        // Apply gravity\n        if (!this.player.grounded) {\n            this.player.vy += this.gravity;\n        }\n        \n        // Update position\n        this.player.x += this.player.vx;\n        this.player.y += this.player.vy;\n        \n        // Update trail\n        this.trail.push({ x: this.player.x, y: this.player.y });\n        if (this.trail.length > this.maxTrailLength) {\n            this.trail.shift();\n        }\n        \n        // Platform collision detection\n        this.handlePlatformCollisions();\n        \n        // Check for spikes collision\n        this.checkSpikeCollisions();\n        \n        // Check for holes (falling)\n        this.checkHoleCollisions();\n        \n        // Check for goal\n        this.checkGoalCollision();\n        \n        // Camera follows player\n        this.camera.x = this.player.x - this.canvas.width / 2;\n        \n        // Allow player to move freely to the left (no invisible wall)\n        \n        // Game over if player falls too far\n        if (this.player.y > this.canvas.height + 100) {\n            this.handlePlayerDeath('Game Over - Press R to restart', 'fall');\n        }\n    }\n    \n    handlePlatformCollisions() {\n        this.player.grounded = false;\n        \n        // Check regular platforms\n        for (const platform of this.stage.platforms) {\n            if (this.checkPlatformCollision(platform)) break;\n        }\n    }\n    \n    checkPlatformCollision(platform) {\n        // Check if player is above the platform and falling down\n        if (this.player.x + this.player.radius > platform.x1 && \n            this.player.x - this.player.radius < platform.x2 &&\n            this.player.y + this.player.radius >= platform.y1 - 5 &&\n            this.player.y + this.player.radius <= platform.y1 + 10 &&\n            this.player.vy >= 0) {\n            \n            this.player.y = platform.y1 - this.player.radius;\n            this.player.vy = 0;\n            this.player.grounded = true;\n            \n            // Reset jump timer for immediate maximum jump\n            this.lastJumpTime = performance.now() - this.autoJumpInterval;\n            return true;\n        }\n        return false;\n    }\n    \n    checkSpikeCollisions() {\n        // Check regular spikes\n        for (const spike of this.stage.spikes) {\n            if (this.player.x + this.player.radius > spike.x &&\n                this.player.x - this.player.radius < spike.x + spike.width &&\n                this.player.y + this.player.radius > spike.y &&\n                this.player.y - this.player.radius < spike.y + spike.height) {\n                \n                this.handlePlayerDeath('Hit by spike! Press R to restart');\n                return;\n            }\n        }\n    }\n    \n    checkHoleCollisions() {\n        // Check if player fell into a hole\n        if (this.player.y > 600) {\n            this.handlePlayerDeath('Fell into hole! Press R to restart', 'fall');\n        }\n    }\n    \n    checkGoalCollision() {\n        const goal = this.stage.goal;\n        if (this.player.x + this.player.radius > goal.x &&\n            this.player.x - this.player.radius < goal.x + goal.width &&\n            this.player.y + this.player.radius > goal.y &&\n            this.player.y - this.player.radius < goal.y + goal.height) {\n            \n            this.gameOver = true;\n            this.finalScore = Math.ceil(this.timeRemaining);\n            this.gameStatus.textContent = `Goal reached! Score: ${this.finalScore} - Press R to restart`;\n            this.scoreDisplay.textContent = `Score: ${this.finalScore}`;\n            \n            // Start clear animation\n            this.startClearAnimation();\n        }\n    }\n    \n    startClearAnimation() {\n        this.clearAnimation.active = true;\n        this.clearAnimation.startTime = performance.now();\n        this.clearAnimation.particles = [];\n        \n        // Create celebration particles around player\n        for (let i = 0; i < 20; i++) {\n            this.clearAnimation.particles.push({\n                x: this.player.x + (Math.random() - 0.5) * 100,\n                y: this.player.y + (Math.random() - 0.5) * 100,\n                vx: (Math.random() - 0.5) * 8,\n                vy: (Math.random() - 0.5) * 8 - 2,\n                life: 1.0,\n                decay: 0.02 + Math.random() * 0.02\n            });\n        }\n    }\n    \n    updateClearAnimation() {\n        if (!this.clearAnimation.active) return;\n        \n        const currentTime = performance.now();\n        const elapsed = currentTime - this.clearAnimation.startTime;\n        \n        // Update particles\n        for (let i = this.clearAnimation.particles.length - 1; i >= 0; i--) {\n            const particle = this.clearAnimation.particles[i];\n            \n            particle.x += particle.vx;\n            particle.y += particle.vy;\n            particle.vy += 0.1; // gravity\n            particle.life -= particle.decay;\n            \n            if (particle.life <= 0) {\n                this.clearAnimation.particles.splice(i, 1);\n            }\n        }\n        \n        // End animation after duration\n        if (elapsed > this.clearAnimation.duration) {\n            this.clearAnimation.active = false;\n        }\n    }\n    \n    renderClearAnimation() {\n        if (!this.clearAnimation.active) return;\n        \n        const currentTime = performance.now();\n        const elapsed = currentTime - this.clearAnimation.startTime;\n        const progress = elapsed / this.clearAnimation.duration;\n        \n        // Draw celebration particles\n        for (const particle of this.clearAnimation.particles) {\n            this.ctx.fillStyle = `rgba(255, 255, 255, ${particle.life})`;\n            this.ctx.beginPath();\n            this.ctx.arc(particle.x, particle.y, 2, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        \n        // Draw pulsing \"CLEAR!\" text\n        if (progress < 0.8) {\n            const pulse = Math.sin(elapsed * 0.01) * 0.3 + 1;\n            const alpha = Math.max(0, 1 - progress / 0.8);\n            \n            this.ctx.fillStyle = `rgba(255, 255, 255, ${alpha})`;\n            this.ctx.font = `${Math.floor(32 * pulse)}px monospace`;\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText('CLEAR!', this.player.x, this.player.y - 50);\n        }\n    }\n    \n    handlePlayerDeath(message, deathType = 'normal') {\n        this.gameOver = true;\n        this.gameStatus.textContent = message;\n        \n        // Determine death mark position based on death type\n        let deathMarkX = this.player.x;\n        let deathMarkY = this.player.y;\n        \n        // For falling deaths, adjust Y position to be visible on screen\n        if (deathType === 'fall') {\n            // Place the X mark near the bottom edge of the visible area\n            deathMarkY = this.camera.y + this.canvas.height - 20;\n        }\n        \n        // Add death mark at adjusted position\n        this.deathMarks.push({\n            x: deathMarkX,\n            y: deathMarkY,\n            timestamp: performance.now()\n        });\n        \n        // Start death animation\n        this.startDeathAnimation();\n        \n        // Clear trail\n        this.trail = [];\n    }\n    \n    startDeathAnimation() {\n        this.deathAnimation.active = true;\n        this.deathAnimation.startTime = performance.now();\n        this.deathAnimation.particles = [];\n        \n        // Create explosion particles\n        for (let i = 0; i < 15; i++) {\n            const angle = (Math.PI * 2 * i) / 15;\n            const speed = 3 + Math.random() * 4;\n            \n            this.deathAnimation.particles.push({\n                x: this.player.x,\n                y: this.player.y,\n                vx: Math.cos(angle) * speed,\n                vy: Math.sin(angle) * speed - 1,\n                life: 1.0,\n                decay: 0.01 + Math.random() * 0.02,\n                size: 2 + Math.random() * 2\n            });\n        }\n    }\n    \n    updateDeathAnimation() {\n        if (!this.deathAnimation.active) return;\n        \n        const currentTime = performance.now();\n        const elapsed = currentTime - this.deathAnimation.startTime;\n        \n        // Update particles\n        for (let i = this.deathAnimation.particles.length - 1; i >= 0; i--) {\n            const particle = this.deathAnimation.particles[i];\n            \n            particle.x += particle.vx;\n            particle.y += particle.vy;\n            particle.vy += 0.1; // gravity\n            particle.life -= particle.decay;\n            \n            if (particle.life <= 0) {\n                this.deathAnimation.particles.splice(i, 1);\n            }\n        }\n        \n        // End animation after duration\n        if (elapsed > this.deathAnimation.duration) {\n            this.deathAnimation.active = false;\n        }\n    }\n    \n    renderDeathAnimation() {\n        if (!this.deathAnimation.active) return;\n        \n        // Draw explosion particles\n        for (const particle of this.deathAnimation.particles) {\n            this.ctx.fillStyle = `rgba(255, 0, 0, ${particle.life})`;\n            this.ctx.beginPath();\n            this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n    \n    renderDeathMarks() {\n        // Draw X marks at death locations\n        this.ctx.strokeStyle = 'rgba(255, 0, 0, 0.8)';\n        this.ctx.lineWidth = 3;\n        \n        for (const mark of this.deathMarks) {\n            const size = 8;\n            \n            // Draw X\n            this.ctx.beginPath();\n            this.ctx.moveTo(mark.x - size, mark.y - size);\n            this.ctx.lineTo(mark.x + size, mark.y + size);\n            this.ctx.moveTo(mark.x + size, mark.y - size);\n            this.ctx.lineTo(mark.x - size, mark.y + size);\n            this.ctx.stroke();\n        }\n        \n        // Reset line width\n        this.ctx.lineWidth = 2;\n    }\n    \n    render() {\n        // Clear canvas\n        this.ctx.fillStyle = 'black';\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n        \n        // Set drawing style (white lines only)\n        this.ctx.strokeStyle = 'white';\n        this.ctx.fillStyle = 'white';\n        this.ctx.lineWidth = 2;\n        \n        // Save context for camera transform\n        this.ctx.save();\n        this.ctx.translate(-this.camera.x, -this.camera.y);\n        \n        // Draw stage elements\n        this.drawStage();\n        this.drawGoalAndTexts();\n        \n        // Draw death marks (always visible)\n        this.renderDeathMarks();\n        \n        // Only draw trail and player if game is running (not over)\n        if (this.gameRunning && !this.gameOver) {\n            // Draw trail effect\n            this.drawTrail();\n            \n            // Draw player (jumping dot)\n            this.ctx.fillStyle = 'white';\n            this.ctx.beginPath();\n            this.ctx.arc(this.player.x, this.player.y, this.player.radius, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n        \n        // Draw death animation (when player dies)\n        this.renderDeathAnimation();\n        \n        // Draw clear animation (affects by camera)\n        this.renderClearAnimation();\n        \n        // Restore context\n        this.ctx.restore();\n        \n        // Draw UI elements (not affected by camera)\n        if (!this.gameRunning && !this.gameOver) {\n            this.ctx.fillStyle = 'white';\n            this.ctx.font = '24px monospace';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText('Press SPACE to Start', this.canvas.width / 2, this.canvas.height / 2);\n        }\n        \n        // Draw game over message\n        if (this.gameOver) {\n            this.ctx.fillStyle = 'white';\n            this.ctx.font = '24px monospace';\n            this.ctx.textAlign = 'center';\n            this.ctx.fillText('Game Over - Press R to restart', this.canvas.width / 2, this.canvas.height / 2);\n        }\n        \n        // Draw credits at bottom center\n        this.ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';\n        this.ctx.font = '12px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText('Made by traponion', this.canvas.width / 2, this.canvas.height - 30);\n        this.ctx.fillText('github.com/traponion/jumping-dot-game', this.canvas.width / 2, this.canvas.height - 15);\n        \n    }\n    \n    gameLoop(currentTime) {\n        // Handle first frame or reset cases\n        if (this.lastTime === null) {\n            this.lastTime = currentTime;\n            // Skip the first frame to avoid huge deltaTime\n            requestAnimationFrame((time) => this.gameLoop(time));\n            return;\n        }\n        \n        const deltaTime = currentTime - this.lastTime;\n        this.lastTime = currentTime;\n        \n        // Prevent huge delta times (e.g. from tab switching or reload)\n        const clampedDelta = Math.min(deltaTime, 16.67); // Max 60fps equivalent\n        \n        this.update(clampedDelta);\n        this.updateClearAnimation();\n        this.updateDeathAnimation();\n        this.render();\n        \n        this.animationId = requestAnimationFrame((time) => this.gameLoop(time));\n    }\n    \n    drawStage() {\n        // Draw regular platforms\n        this.ctx.strokeStyle = 'white';\n        this.ctx.lineWidth = 2;\n        \n        for (const platform of this.stage.platforms) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(platform.x1, platform.y1);\n            this.ctx.lineTo(platform.x2, platform.y2);\n            this.ctx.stroke();\n        }\n        \n        // Draw spikes (triangular shapes)\n        this.ctx.fillStyle = 'white';\n        for (const spike of this.stage.spikes) {\n            this.drawSpike(spike);\n        }\n    }\n    \n    drawSpike(spike) {\n        this.ctx.beginPath();\n        this.ctx.moveTo(spike.x, spike.y + spike.height);\n        this.ctx.lineTo(spike.x + spike.width / 2, spike.y);\n        this.ctx.lineTo(spike.x + spike.width, spike.y + spike.height);\n        this.ctx.closePath();\n        this.ctx.fill();\n        \n        // Draw spike outline\n        this.ctx.strokeStyle = 'white';\n        this.ctx.lineWidth = 1;\n        this.ctx.stroke();\n    }\n    \n    drawGoalAndTexts() {\n        // Draw goal (rectangular flag)\n        const goal = this.stage.goal;\n        this.ctx.strokeStyle = 'white';\n        this.ctx.lineWidth = 2;\n        this.ctx.strokeRect(goal.x, goal.y, goal.width, goal.height);\n        \n        // Draw flag pattern (diagonal lines)\n        this.ctx.beginPath();\n        this.ctx.moveTo(goal.x, goal.y);\n        this.ctx.lineTo(goal.x + goal.width, goal.y + goal.height);\n        this.ctx.moveTo(goal.x + goal.width, goal.y);\n        this.ctx.lineTo(goal.x, goal.y + goal.height);\n        this.ctx.stroke();\n        \n        // Draw start text\n        const startText = this.stage.startText;\n        this.ctx.fillStyle = 'white';\n        this.ctx.font = '16px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(startText.text, startText.x, startText.y);\n        \n        // Draw goal text\n        const goalText = this.stage.goalText;\n        this.ctx.fillStyle = 'white';\n        this.ctx.font = '16px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(goalText.text, goalText.x, goalText.y);\n        \n        // Draw left edge sarcastic message\n        const leftMsg = this.stage.leftEdgeMessage;\n        this.ctx.fillStyle = 'white';\n        this.ctx.font = '14px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(leftMsg.text, leftMsg.x, leftMsg.y);\n        \n        // Draw left edge sub message\n        const leftSubMsg = this.stage.leftEdgeSubMessage;\n        this.ctx.fillStyle = 'white';\n        this.ctx.font = '12px monospace';\n        this.ctx.textAlign = 'center';\n        this.ctx.fillText(leftSubMsg.text, leftSubMsg.x, leftSubMsg.y);\n    }\n    \n    \n    drawTrail() {\n        // Draw trail with fading effect\n        for (let i = 0; i < this.trail.length; i++) {\n            const point = this.trail[i];\n            const alpha = (i + 1) / this.trail.length; // Fade from 0 to 1\n            const radius = this.player.radius * alpha * 0.8; // Smaller trailing dots\n            \n            this.ctx.fillStyle = `rgba(255, 255, 255, ${alpha * 0.6})`;\n            this.ctx.beginPath();\n            this.ctx.arc(point.x, point.y, radius, 0, Math.PI * 2);\n            this.ctx.fill();\n        }\n    }\n}\n\n","import { JumpingDotGame } from './core/Game.js';\n\n// Start the game when page loads\nwindow.addEventListener('load', () => {\n    const game = new JumpingDotGame();\n});"],"names":["JumpingDotGame","time","stageNumber","e","deltaTime","elapsedSeconds","leftInput","rightInput","maxSpeed","currentTime","platform","spike","goal","i","elapsed","particle","progress","pulse","alpha","message","deathType","deathMarkX","deathMarkY","angle","speed","mark","clampedDelta","startText","goalText","leftMsg","leftSubMsg","point","radius"],"mappings":"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"}